{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Repo-Template Documentation","text":"<p>Welcome to the EcoSphereNetwork Repo-Template documentation! This documentation will help you understand and use our repository template to create well organized and structured new repos.</p>"},{"location":"#overview","title":"Overview","text":"<p>Repo-Template is template for EcoSphereNetwork's repositories. If you want to create a new repo, use this template. The template features:</p> <ul> <li>General repository structure</li> <li>Repository documentation</li> <li>Automations through bots using workflows and actions </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Repo-Template, check out the following sections:</p> <ol> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Configuration Guide</li> </ol>"},{"location":"#mkdocs-commands","title":"mkdocs Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to get involved.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#mkdocs","title":"Mkdocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"development/cicd/","title":"CI/CD Pipeline","text":"<p>This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for Smolit LLM-NN.</p>"},{"location":"development/cicd/#overview","title":"Overview","text":"<p>Our CI/CD pipeline automates the following processes:</p> <ol> <li>Code Quality Checks</li> <li>Testing</li> <li>Building</li> <li>Deployment</li> </ol>"},{"location":"development/cicd/#pipeline-stages","title":"Pipeline Stages","text":""},{"location":"development/cicd/#1-test-stage","title":"1. Test Stage","text":"<p>The test stage runs on every push and pull request:</p> <pre><code>graph TD\n    A[Push/PR] --&gt; B[Install Dependencies]\n    B --&gt; C[Linting]\n    B --&gt; D[Type Checking]\n    B --&gt; E[Unit Tests]\n    C --&gt; F[Upload Coverage]\n    D --&gt; F\n    E --&gt; F\n</code></pre> <p>Components: - Linting with <code>flake8</code>, <code>black</code>, and <code>isort</code> - Type checking with <code>mypy</code> - Unit tests with <code>pytest</code> - Coverage reporting with <code>codecov</code></p>"},{"location":"development/cicd/#2-build-stage","title":"2. Build Stage","text":"<p>The build stage runs on pushes to main and develop branches:</p> <pre><code>graph TD\n    A[Push to main/develop] --&gt; B[Build Package]\n    B --&gt; C[Upload Artifact]\n</code></pre> <p>Components: - Package building with Poetry - Artifact uploading to GitHub Actions</p>"},{"location":"development/cicd/#3-deployment-stages","title":"3. Deployment Stages","text":""},{"location":"development/cicd/#staging-deployment","title":"Staging Deployment","text":"<p>Runs on pushes to the develop branch:</p> <pre><code>graph TD\n    A[Push to develop] --&gt; B[Download Artifact]\n    B --&gt; C[Build Docker Image]\n    C --&gt; D[Push to Registry]\n    D --&gt; E[Deploy to Staging]\n</code></pre>"},{"location":"development/cicd/#production-deployment","title":"Production Deployment","text":"<p>Runs on pushes to the main branch:</p> <pre><code>graph TD\n    A[Push to main] --&gt; B[Download Artifact]\n    B --&gt; C[Build Docker Image]\n    C --&gt; D[Push to Registry]\n    D --&gt; E[Deploy to Production]\n</code></pre>"},{"location":"development/cicd/#configuration","title":"Configuration","text":""},{"location":"development/cicd/#github-actions","title":"GitHub Actions","text":"<p>The pipeline is configured in <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    # Test job configuration...\n\n  build:\n    # Build job configuration...\n\n  deploy-staging:\n    # Staging deployment configuration...\n\n  deploy-production:\n    # Production deployment configuration...\n</code></pre>"},{"location":"development/cicd/#environment-variables","title":"Environment Variables","text":"<p>Required secrets in GitHub:</p> <ul> <li><code>DOCKER_USERNAME</code>: Docker Hub username</li> <li><code>DOCKER_PASSWORD</code>: Docker Hub password</li> <li><code>STAGING_SSH_KEY</code>: SSH key for staging server</li> <li><code>PRODUCTION_SSH_KEY</code>: SSH key for production server</li> </ul>"},{"location":"development/cicd/#docker-configuration","title":"Docker Configuration","text":"<p>Dockerfile for the application:</p> <pre><code>FROM python:3.10-slim\n\nWORKDIR /app\n\n# Install Poetry\nRUN pip install poetry\n\n# Copy project files\nCOPY pyproject.toml poetry.lock ./\nCOPY smolit_llm_nn/ ./smolit_llm_nn/\n\n# Install dependencies\nRUN poetry config virtualenvs.create false \\\n    &amp;&amp; poetry install --no-dev\n\n# Run application\nCMD [\"poetry\", \"run\", \"python\", \"-m\", \"smolit_llm_nn\"]\n</code></pre>"},{"location":"development/cicd/#github-gitignore","title":"GitHub .gitignore","text":"<p>The gitignore file is configured in <code>Repo-Template/.gitignore</code>:</p> <pre><code>**/node_modules\n</code></pre>"},{"location":"development/cicd/#monitoring","title":"Monitoring","text":"<p>The pipeline includes several monitoring points:</p> <ol> <li>Test Results:</li> <li>Unit test results</li> <li>Coverage reports</li> <li> <p>Linting issues</p> </li> <li> <p>Build Artifacts:</p> </li> <li>Package versions</li> <li>Build logs</li> <li> <p>Docker image tags</p> </li> <li> <p>Deployment Status:</p> </li> <li>Deployment success/failure</li> <li>Environment health checks</li> <li>Service metrics</li> </ol>"},{"location":"development/cicd/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Failed Tests:</li> <li>Check test logs in GitHub Actions</li> <li>Run tests locally: <code>poetry run pytest</code></li> <li> <p>Verify dependencies are up to date</p> </li> <li> <p>Build Failures:</p> </li> <li>Check Poetry build logs</li> <li>Verify package dependencies</li> <li> <p>Check Docker build context</p> </li> <li> <p>Deployment Issues:</p> </li> <li>Verify environment variables</li> <li>Check Docker registry access</li> <li>Validate deployment configurations</li> </ol>"},{"location":"development/cicd/#best-practices","title":"Best Practices","text":"<ol> <li>Branch Protection:</li> <li>Require PR reviews</li> <li>Enforce status checks</li> <li> <p>Protect main and develop branches</p> </li> <li> <p>Version Control:</p> </li> <li>Use semantic versioning</li> <li>Tag releases</li> <li> <p>Keep changelog updated</p> </li> <li> <p>Testing:</p> </li> <li>Write comprehensive tests</li> <li>Maintain high coverage</li> <li> <p>Test in isolation</p> </li> <li> <p>Documentation:</p> </li> <li>Document API changes</li> <li>Update deployment guides</li> <li>Keep README current</li> </ol>"},{"location":"development/cicd/#future-improvements","title":"Future Improvements","text":"<p>Planned enhancements to the pipeline:</p> <ol> <li>Automated Version Bumping:</li> <li>Implement semantic release</li> <li>Automate changelog generation</li> <li> <p>Version tagging</p> </li> <li> <p>Enhanced Testing:</p> </li> <li>Integration tests</li> <li>Performance tests</li> <li> <p>Security scans</p> </li> <li> <p>Deployment Enhancements:</p> </li> <li>Blue-green deployments</li> <li>Canary releases</li> <li> <p>Automated rollbacks</p> </li> <li> <p>Monitoring Improvements:</p> </li> <li>Enhanced metrics</li> <li>Automated alerts</li> <li>Performance tracking</li> </ol>"},{"location":"development/contributing/","title":"Contributing to EcoSphereNetwork's Repo-Template","text":"<p>We love your input! We want to make contributing to EcoSphereNetwork's Repo-Template as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"development/contributing/#development-process","title":"Development Process","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.</p> <ol> <li>Fork the repo and create your branch from <code>develop</code></li> <li>If you've added code that should be tested, add tests</li> <li>If you've changed APIs, update the documentation</li> <li>Ensure the test suite passes</li> <li>Make sure your code lints</li> <li>Issue that pull request!</li> </ol>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes to the interface, if applicable</li> <li>Update the docs with any new features or changes</li> <li>The PR will be merged once you have the sign-off of two other developers</li> <li>Make sure the CI pipeline passes</li> </ol>"},{"location":"development/contributing/#any-contributions-you-make-will-be-under-the-mit-software-license","title":"Any contributions you make will be under the MIT Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"development/contributing/#report-bugs-using-githubs-issue-tracker","title":"Report bugs using GitHub's issue tracker","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue.</p>"},{"location":"development/contributing/#write-bug-reports-with-detail-background-and-sample-code","title":"Write bug reports with detail, background, and sample code","text":"<p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce</li> <li>Be specific!</li> <li>Give sample code if you can</li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/EcoSphereNetwork/Repo-Template.git\ncd Repo-Template\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks: <pre><code>poetry run pre-commit install\n</code></pre></p> </li> <li> <p>Create a new branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use several tools to maintain code quality:</p> <ul> <li><code>black</code> for code formatting</li> <li><code>isort</code> for import sorting</li> <li><code>flake8</code> for style guide enforcement</li> <li><code>mypy</code> for type checking</li> </ul> <p>Run the full suite: <pre><code>poetry run black .\npoetry run isort .\npoetry run flake8 .\npoetry run mypy .\n</code></pre></p>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>We use <code>pytest</code> for testing. Run the tests: <pre><code>poetry run pytest\n</code></pre></p> <p>With coverage: <pre><code>poetry run pytest --cov=. --cov-report=xml\n</code></pre></p>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>We use <code>mkdocs</code> with the Material theme for documentation. To serve docs locally: <pre><code>poetry run mkdocs serve\n</code></pre></p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its MIT License.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>** Weiter \u00fcberarbeiten **</p>"},{"location":"getting-started/configuration/#how-to-use-this-template","title":"How to use this Template","text":""},{"location":"getting-started/configuration/#configuration","title":"Configuration","text":"<ul> <li>Der Ordner Repo-Template/docs enth\u00e4lt die Repository Dokumentation</li> <li>Docs und mkdocs nutzung erl\u00e4utern </li> <li>Der Ordner Repo-Template/src enth\u00e4lt den Projekt Code des Repository</li> <li>Alle \u00c4nderungen in \"mkdocs.yml (Repo-Template/mkdocs.yml)\" doumentieren!</li> </ul>"},{"location":"getting-started/configuration/#github-actions","title":"GitHub Actions","text":"<p>The pipeline is configured in <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    # Test job configuration...\n\n  build:\n    # Build job configuration...\n\n  deploy-staging:\n    # Staging deployment configuration...\n\n  deploy-production:\n    # Production deployment configuration...\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Required secrets in GitHub:</p> <ul> <li><code>DOCKER_USERNAME</code>: Docker Hub username</li> <li><code>DOCKER_PASSWORD</code>: Docker Hub password</li> <li><code>STAGING_SSH_KEY</code>: SSH key for staging server</li> <li><code>PRODUCTION_SSH_KEY</code>: SSH key for production server</li> </ul>"},{"location":"getting-started/configuration/#docker-configuration","title":"Docker Configuration","text":"<p>Dockerfile for the application:</p> <pre><code>FROM python:3.10-slim\n\nWORKDIR /app\n\n# Install Poetry\nRUN pip install poetry\n\n# Copy project files\nCOPY pyproject.toml poetry.lock ./\nCOPY smolit_llm_nn/ ./smolit_llm_nn/\n\n# Install dependencies\nRUN poetry config virtualenvs.create false \\\n    &amp;&amp; poetry install --no-dev\n\n# Run application\nCMD [\"poetry\", \"run\", \"python\", \"-m\", \"smolit_llm_nn\"]\n</code></pre>"},{"location":"getting-started/configuration/#github-gitignore","title":"GitHub .gitignore","text":"<p>The gitignore file is configured in <code>Repo-Template/.gitignore</code>:</p> <pre><code>**/node_modules\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#installation","title":"Installation","text":"<p>Installations Anleitung des neues Projektes hinzuf\u00fcgen</p>"},{"location":"getting-started/installation/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Git</li> <li>...</li> </ul>"},{"location":"getting-started/installation/#2-clone-repository","title":"2. Clone Repository","text":"<pre><code>git clone https://github.com/EcoSphereNetwork/Repo-Template.git\ncd Repo-Template\n</code></pre>"},{"location":"getting-started/installation/#3-rename-the-repo","title":"3. Rename the Repo...","text":"<pre><code>**\"Wie\" das Template zu einem neuen Repo machen? Clonen? Was ist mit .git und anderen dateien? ANPASSEN**\n</code></pre>"},{"location":"getting-started/installation/#4-install-dependencies","title":"4. Install Dependencies","text":"<pre><code>&lt;x&gt;\n</code></pre>"},{"location":"getting-started/installation/#5-start-documentation-server","title":"5. Start Documentation Server","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"getting-started/installation/#6-start-to-dev","title":"6. Start to dev","text":"<pre><code>Happy coding :)\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>** Weiter \u00fcberarbeiten **</p>"},{"location":"getting-started/quickstart/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/quickstart/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>git</li> <li>python</li> <li>mkdocs</li> </ul>"},{"location":"getting-started/quickstart/#2-clone-repository","title":"2. Clone Repository","text":"<pre><code>git clone https://github.com/EcoSphereNetwork/Repo-Template.git\ncd Repo-Template\n</code></pre>"},{"location":"getting-started/quickstart/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install mkdocs[all]\n</code></pre>"},{"location":"getting-started/quickstart/#4-start-documentation-server","title":"4. Start Documentation Server","text":"<pre><code>mkdocs serve\n</code></pre>"}]}